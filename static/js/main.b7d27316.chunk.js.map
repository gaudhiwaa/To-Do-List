{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","value","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","edit","placeholder","onChange","name","ref","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMA8DeA,MA5Df,SAAkBC,GACd,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOC,QAGhBC,EAAe,SAAAH,GACjBA,EAAEI,iBAEFd,EAAMe,SAAS,CACXC,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMlB,IAGVC,EAAS,KAGb,OACI,sBAAMY,SAAUF,EAAcQ,UAAU,YAAxC,SACGrB,EAAMsB,KACL,qCACE,uBACEC,YAAY,mBACZX,MAAOV,EACPsB,SAAUf,EACVgB,KAAK,OACLC,IAAKtB,EACLiB,UAAU,oBAEZ,wBAAQM,QAASd,EAAcQ,UAAU,mBAAzC,uBAKF,qCACE,uBACEE,YAAY,aACZX,MAAOV,EACPsB,SAAUf,EACVgB,KAAK,OACLJ,UAAU,aACVK,IAAKtB,IAEP,wBAAQuB,QAASd,EAAcQ,UAAU,cAAzC,4B,eCNCO,MAxCf,YAA8D,IAA/CC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WAC5C,EAAuB/B,mBAAS,CAC5Be,GAAI,KACJJ,MAAM,KAFV,mBAAMU,EAAN,KAAYW,EAAZ,KAaA,OAAIX,EAAKN,GACE,cAAC,EAAD,CAAUM,KAAMA,EAAMP,SATZ,SAAAH,GACjBoB,EAAWV,EAAKN,GAAIJ,GACpBqB,EAAQ,CACJjB,GAAI,KACJJ,MAAO,QAQRiB,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,sBACIf,UAAWc,EAAKE,WAAa,oBAAsB,WADvD,UAII,qBAAmBV,QAAS,kBAAMG,EAAaK,EAAKnB,KAApD,SACKmB,EAAKf,MADAe,EAAKnB,IAGf,sBAAKK,UAAU,QAAf,UACI,cAAC,IAAD,CACIM,QAAS,kBAAMI,EAAWI,EAAKnB,KAC/BK,UAAU,gBAEd,cAAC,IAAD,CACIM,QAAS,kBAAMM,EAAQ,CAACjB,GAAImB,EAAKnB,GAAIJ,MAAOuB,EAAKf,QACjDC,UAAU,mBAZbe,OC6BFE,MApDf,WACI,MAA0BrC,mBAAU,IAApC,mBAAO4B,EAAP,KAAcU,EAAd,KAqCA,OACI,gCACI,wDACA,cAAC,EAAD,CAAUxB,SAtCF,SAAAoB,GACZ,GAAIA,EAAKf,OAAQ,QAAQoB,KAAKL,EAAKf,MAAnC,CAIA,IAAMqB,EAAQ,CAAIN,GAAJ,mBAAaN,IAE3BU,EAASE,OAgCL,cAAC,EAAD,CACIZ,MAAOA,EACPC,aAhBS,SAAAd,GACjB,IAAI0B,EAAeb,EAAMK,KAAI,SAAAC,GAIzB,OAHGA,EAAKnB,KAAOA,IACXmB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXI,EAASG,IAUDX,WAvBO,SAAAf,GACf,IAAM2B,EAAY,YAAId,GAAOe,QAAO,SAAAT,GAAI,OAAIA,EAAKnB,KAAOA,KAExDuB,EAASI,IAqBDX,WAjCO,SAACa,EAAQC,GACpBA,EAAS1B,OAAQ,QAAQoB,KAAKM,EAAS1B,OAI3CmB,GAAS,SAAAQ,GAAI,OAAIA,EAAKb,KAAI,SAAAc,GAAI,OAAKA,EAAKhC,KAAO6B,EAASC,EAAWE,eCX5DC,MARf,WACE,OACE,qBAAK5B,UAAU,WAAf,SACE,cAAC,EAAD,OCFN6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b7d27316.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\n\nfunction TodoForm(props) {\n    const [input, setInput] = useState('');\n\n    const inputRef = useRef(null)\n\n    useEffect(() => {\n        inputRef.current.focus()\n    })\n\n    const handleChange = e => {\n        setInput(e.target.value);\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        props.onSubmit({\n            id: Math.floor(Math.random() * 10000),\n            text: input\n        });\n\n        setInput('');\n    };\n\n    return (\n        <form onSubmit={handleSubmit} className='todo-form'>\n          {props.edit ? (\n            <>\n              <input\n                placeholder='Update your item'\n                value={input}\n                onChange={handleChange}\n                name='text'\n                ref={inputRef}\n                className='todo-input edit'\n              />\n              <button onClick={handleSubmit} className='todo-button edit'>\n                Update\n              </button>\n            </>\n          ) : (\n            <>\n              <input\n                placeholder='Add a todo'\n                value={input}\n                onChange={handleChange}\n                name='text'\n                className='todo-input'\n                ref={inputRef}\n              />\n              <button onClick={handleSubmit} className='todo-button'>\n                Add todo\n              </button>\n            </>\n          )}\n        </form>\n      );\n    }\n\n\nexport default TodoForm\n","import React, {useState} from 'react';\nimport TodoList from './TodoList';\nimport { RiCloseCircleLine } from 'react-icons/ri';\nimport { TiEdit } from 'react-icons/ti';\nimport TodoForm from './TodoForm';\n\nfunction Todo({todos, completeTodo, removeTodo, updateTodo}) {\n    const[edit, setEdit] = useState({\n        id: null,\n        value:''\n    });\n\n    const submitUpdate = value => {\n        updateTodo(edit.id, value)\n        setEdit({\n            id: null,\n            value: ''\n        })\n    }\n\n    if (edit.id) {\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />\n    }\n\n    return todos.map((todo, index) => (\n        <div \n            className={todo.isComplete ? 'todo-row complete' : 'todo-row'} \n            key={index}\n        >\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>\n                {todo.text}\n            </div>\n            <div className='icons'>\n                <RiCloseCircleLine \n                    onClick={() => removeTodo(todo.id)}\n                    className='delete-icon'\n                />\n                <TiEdit \n                    onClick={() => setEdit({id: todo.id, value: todo.text})}\n                    className='edit-icon'\n                />\n            </div>\n        </div>\n    ));\n}\n\nexport default Todo\n","import React, {useState} from 'react'\nimport TodoForm from './TodoForm'\nimport Todo from './Todo'\n\nfunction TodoList() {\n    const [todos, setTodos] = useState ([]);\n\n    const addTodo = todo => {\n        if(!todo.text || /^\\s*$/.test(todo.text)){\n            return;\n        }\n\n        const newTodos = [todo, ...todos];\n        \n        setTodos(newTodos);\n    }\n\n    const updateTodo = (todoId, newValue) => {\n        if(!newValue.text || /^\\s*$/.test(newValue.text)){\n            return;\n        }\n\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item))\n        );\n    }\n\n    const removeTodo = id => {\n        const removeArr = [...todos].filter(todo => todo.id !== id)\n    \n        setTodos(removeArr)\n    }\n\n    const completeTodo = id => {\n        let updatedTodos = todos.map(todo =>{\n            if(todo.id === id){\n                todo.isComplete = !todo.isComplete;\n            }\n            return todo;\n        });\n        setTodos(updatedTodos);\n    };\n\n    return ( \n        <div>\n            <h1>Your Simple To-Do List</h1>\n            <TodoForm onSubmit={addTodo}/>\n            <Todo \n                todos={todos} \n                completeTodo={completeTodo} \n                removeTodo={removeTodo} \n                updateTodo={updateTodo} \n            />\n        </div>\n    )\n}\n\nexport default TodoList;","import './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}